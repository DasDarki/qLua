//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Development/Small Projects/qLua/grammar/QLua.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace qLua.Compiler.CodeAnalysis {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class QLuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, NAME=86, NORMALSTRING=87, 
		CHARSTRING=88, TEMPLATESTRING=89, LONGSTRING=90, INT=91, HEX=92, FLOAT=93, 
		HEX_FLOAT=94, COMMENT=95, LINE_COMMENT=96, WS=97, SHEBANG=98;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_stat_semicolon = 3, 
		RULE_stat_varassign = 4, RULE_stat_break = 5, RULE_stat_continue = 6, 
		RULE_stat_goto = 7, RULE_stat_do = 8, RULE_stat_while = 9, RULE_stat_repeat = 10, 
		RULE_stat_if = 11, RULE_stat_if_branch = 12, RULE_stat_elseif_branch = 13, 
		RULE_stat_else_branch = 14, RULE_stat_for = 15, RULE_stat_forin = 16, 
		RULE_classLevelStat = 17, RULE_clstat_func1 = 18, RULE_clstat_func2 = 19, 
		RULE_clstat_vardecl = 20, RULE_clstat_tabledecon = 21, RULE_clstat_classdef = 22, 
		RULE_clstat_interfacedef = 23, RULE_clstat_enumdef = 24, RULE_attnamelist = 25, 
		RULE_attname = 26, RULE_attrib = 27, RULE_laststat = 28, RULE_label = 29, 
		RULE_funcname = 30, RULE_varlist = 31, RULE_namelist = 32, RULE_explist = 33, 
		RULE_exp = 34, RULE_prefixexp = 35, RULE_functioncall = 36, RULE_varOrExp = 37, 
		RULE_var = 38, RULE_varSuffix = 39, RULE_nameAndArgs = 40, RULE_args = 41, 
		RULE_functiondef = 42, RULE_funcbody = 43, RULE_funchead = 44, RULE_parlist = 45, 
		RULE_param = 46, RULE_paramVararg = 47, RULE_tableconstructor = 48, RULE_fieldlist = 49, 
		RULE_field = 50, RULE_fieldsep = 51, RULE_operatorOr = 52, RULE_operatorAnd = 53, 
		RULE_operatorComparison = 54, RULE_operatorStrcat = 55, RULE_operatorAddSub = 56, 
		RULE_operatorMulDivMod = 57, RULE_operatorBitwise = 58, RULE_operatorUnary = 59, 
		RULE_operatorPower = 60, RULE_number = 61, RULE_string = 62, RULE_enumDefinition = 63, 
		RULE_enumBody = 64, RULE_enumProperty = 65, RULE_enumValue = 66, RULE_classDefinition = 67, 
		RULE_classExtends = 68, RULE_classImplements = 69, RULE_classBody = 70, 
		RULE_interfaceDefinition = 71, RULE_interfaceExtends = 72, RULE_interfaceBody = 73, 
		RULE_interfaceStat = 74, RULE_interfaceFunction = 75, RULE_interfaceField = 76, 
		RULE_constructorCall = 77, RULE_constructorCallArgs = 78, RULE_typeAnnotation = 79, 
		RULE_typeTuple = 80, RULE_nilableType = 81, RULE_type = 82, RULE_basicType = 83, 
		RULE_funcType = 84, RULE_tableType = 85, RULE_tableField = 86, RULE_arrayType = 87, 
		RULE_baseTypeForArray = 88, RULE_tableDeconstructionList = 89, RULE_tableDeconstruction = 90, 
		RULE_tableDeconstructionField = 91, RULE_declaration = 92, RULE_moduleDeclaration = 93, 
		RULE_moduleDeclBody = 94, RULE_moduleLevelDeclStat = 95, RULE_classDeclaration = 96, 
		RULE_classDeclBody = 97, RULE_interfaceDeclaration = 98, RULE_interfaceDeclBody = 99, 
		RULE_interfaceDeclStat = 100, RULE_enumDeclaration = 101, RULE_enumDeclBody = 102;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "stat_semicolon", "stat_varassign", "stat_break", 
		"stat_continue", "stat_goto", "stat_do", "stat_while", "stat_repeat", 
		"stat_if", "stat_if_branch", "stat_elseif_branch", "stat_else_branch", 
		"stat_for", "stat_forin", "classLevelStat", "clstat_func1", "clstat_func2", 
		"clstat_vardecl", "clstat_tabledecon", "clstat_classdef", "clstat_interfacedef", 
		"clstat_enumdef", "attnamelist", "attname", "attrib", "laststat", "label", 
		"funcname", "varlist", "namelist", "explist", "exp", "prefixexp", "functioncall", 
		"varOrExp", "var", "varSuffix", "nameAndArgs", "args", "functiondef", 
		"funcbody", "funchead", "parlist", "param", "paramVararg", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string", "enumDefinition", 
		"enumBody", "enumProperty", "enumValue", "classDefinition", "classExtends", 
		"classImplements", "classBody", "interfaceDefinition", "interfaceExtends", 
		"interfaceBody", "interfaceStat", "interfaceFunction", "interfaceField", 
		"constructorCall", "constructorCallArgs", "typeAnnotation", "typeTuple", 
		"nilableType", "type", "basicType", "funcType", "tableType", "tableField", 
		"arrayType", "baseTypeForArray", "tableDeconstructionList", "tableDeconstruction", 
		"tableDeconstructionField", "declaration", "moduleDeclaration", "moduleDeclBody", 
		"moduleLevelDeclStat", "classDeclaration", "classDeclBody", "interfaceDeclaration", 
		"interfaceDeclBody", "interfaceDeclStat", "enumDeclaration", "enumDeclBody"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'continue'", "'goto'", "'do'", "'end'", 
		"'while'", "'repeat'", "'until'", "'if'", "'then'", "'elseif'", "'else'", 
		"'for'", "','", "'in'", "'function'", "'local'", "'<'", "'>'", "'return'", 
		"'::'", "'.'", "':'", "'nil'", "'false'", "'true'", "'...'", "'as'", "'?'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'||'", "'and'", "'&&'", 
		"'<='", "'>='", "'~='", "'=='", "'!='", "'==='", "'!=='", "'instanceof'", 
		"'is'", "'??'", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", "'&'", 
		"'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", "'!'", "'++'", "'--'", "'^'", 
		"'enum'", "'class'", "'extends'", "'implements'", "'interface'", "'new'", 
		"'| nil'", "'any'", "'boolean'", "'number'", "'string'", "'table'", "'userdata'", 
		"'thread'", "'declare'", "'module'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "NAME", "NORMALSTRING", "CHARSTRING", "TEMPLATESTRING", "LONGSTRING", 
		"INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QLua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QLuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QLuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QLuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QLuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			block();
			State = 207;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LaststatContext laststat() {
			return GetRuleContext<LaststatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 209;
						stat();
						}
						} 
					}
					State = 214;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__83) {
					{
					{
					State = 215;
					declaration();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4194328L) != 0)) {
					{
					State = 221;
					laststat();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__83) {
					{
					{
					State = 224;
					declaration();
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 230;
						stat();
						}
						} 
					}
					State = 235;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4194328L) != 0)) {
					{
					State = 236;
					laststat();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stat_semicolonContext stat_semicolon() {
			return GetRuleContext<Stat_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_varassignContext stat_varassign() {
			return GetRuleContext<Stat_varassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_breakContext stat_break() {
			return GetRuleContext<Stat_breakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_continueContext stat_continue() {
			return GetRuleContext<Stat_continueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_gotoContext stat_goto() {
			return GetRuleContext<Stat_gotoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_doContext stat_do() {
			return GetRuleContext<Stat_doContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_whileContext stat_while() {
			return GetRuleContext<Stat_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_repeatContext stat_repeat() {
			return GetRuleContext<Stat_repeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_forContext stat_for() {
			return GetRuleContext<Stat_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_forinContext stat_forin() {
			return GetRuleContext<Stat_forinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLevelStatContext classLevelStat() {
			return GetRuleContext<ClassLevelStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorCallContext constructorCall() {
			return GetRuleContext<ConstructorCallContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				stat_semicolon();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				stat_varassign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 244;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 245;
				stat_break();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 246;
				stat_continue();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 247;
				stat_goto();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 248;
				stat_do();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 249;
				stat_while();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 250;
				stat_repeat();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 251;
				stat_if();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 252;
				stat_for();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 253;
				stat_forin();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 254;
				classLevelStat();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 255;
				constructorCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_semicolonContext : ParserRuleContext {
		public Stat_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_semicolonContext stat_semicolon() {
		Stat_semicolonContext _localctx = new Stat_semicolonContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat_semicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_varassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Stat_varassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_varassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_varassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_varassignContext stat_varassign() {
		Stat_varassignContext _localctx = new Stat_varassignContext(Context, State);
		EnterRule(_localctx, 8, RULE_stat_varassign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			varlist();
			State = 261;
			Match(T__1);
			State = 262;
			explist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_breakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QLuaParser.INT, 0); }
		public Stat_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_break(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_breakContext stat_break() {
		Stat_breakContext _localctx = new Stat_breakContext(Context, State);
		EnterRule(_localctx, 10, RULE_stat_break);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__2);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 265;
				Match(INT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_continueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QLuaParser.INT, 0); }
		public Stat_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_continue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_continueContext stat_continue() {
		Stat_continueContext _localctx = new Stat_continueContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__3);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 269;
				Match(INT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_gotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public Stat_gotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_goto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_goto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_gotoContext stat_goto() {
		Stat_gotoContext _localctx = new Stat_gotoContext(Context, State);
		EnterRule(_localctx, 14, RULE_stat_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(T__4);
			State = 273;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_doContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_do(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_doContext stat_do() {
		Stat_doContext _localctx = new Stat_doContext(Context, State);
		EnterRule(_localctx, 16, RULE_stat_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(T__5);
			State = 276;
			block();
			State = 277;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileContext stat_while() {
		Stat_whileContext _localctx = new Stat_whileContext(Context, State);
		EnterRule(_localctx, 18, RULE_stat_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__7);
			State = 280;
			exp(0);
			State = 281;
			Match(T__5);
			State = 282;
			block();
			State = 283;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_repeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stat_repeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_repeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_repeatContext stat_repeat() {
		Stat_repeatContext _localctx = new Stat_repeatContext(Context, State);
		EnterRule(_localctx, 20, RULE_stat_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__8);
			State = 286;
			block();
			State = 287;
			Match(T__9);
			State = 288;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stat_if_branchContext stat_if_branch() {
			return GetRuleContext<Stat_if_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_elseif_branchContext[] stat_elseif_branch() {
			return GetRuleContexts<Stat_elseif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_elseif_branchContext stat_elseif_branch(int i) {
			return GetRuleContext<Stat_elseif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_else_branchContext stat_else_branch() {
			return GetRuleContext<Stat_else_branchContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(Context, State);
		EnterRule(_localctx, 22, RULE_stat_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			stat_if_branch();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 291;
				stat_elseif_branch();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 297;
				stat_else_branch();
				}
			}

			State = 300;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_if_branchContext stat_if_branch() {
		Stat_if_branchContext _localctx = new Stat_if_branchContext(Context, State);
		EnterRule(_localctx, 24, RULE_stat_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(T__10);
			State = 303;
			exp(0);
			State = 304;
			Match(T__11);
			State = 305;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_elseif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elseif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elseif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseif_branchContext stat_elseif_branch() {
		Stat_elseif_branchContext _localctx = new Stat_elseif_branchContext(Context, State);
		EnterRule(_localctx, 26, RULE_stat_elseif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__12);
			State = 308;
			exp(0);
			State = 309;
			Match(T__11);
			State = 310;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_else_branchContext stat_else_branch() {
		Stat_else_branchContext _localctx = new Stat_else_branchContext(Context, State);
		EnterRule(_localctx, 28, RULE_stat_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__13);
			State = 313;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forContext stat_for() {
		Stat_forContext _localctx = new Stat_forContext(Context, State);
		EnterRule(_localctx, 30, RULE_stat_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__14);
			State = 316;
			Match(NAME);
			State = 317;
			Match(T__1);
			State = 318;
			exp(0);
			State = 319;
			Match(T__15);
			State = 320;
			exp(0);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 321;
				Match(T__15);
				State = 322;
				exp(0);
				}
			}

			State = 325;
			Match(T__5);
			State = 326;
			block();
			State = 327;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_forinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forinContext stat_forin() {
		Stat_forinContext _localctx = new Stat_forinContext(Context, State);
		EnterRule(_localctx, 32, RULE_stat_forin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(T__14);
			State = 330;
			namelist();
			State = 331;
			Match(T__16);
			State = 332;
			explist();
			State = 333;
			Match(T__5);
			State = 334;
			block();
			State = 335;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassLevelStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_func1Context clstat_func1() {
			return GetRuleContext<Clstat_func1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_func2Context clstat_func2() {
			return GetRuleContext<Clstat_func2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_vardeclContext clstat_vardecl() {
			return GetRuleContext<Clstat_vardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_tabledeconContext clstat_tabledecon() {
			return GetRuleContext<Clstat_tabledeconContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_classdefContext clstat_classdef() {
			return GetRuleContext<Clstat_classdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_interfacedefContext clstat_interfacedef() {
			return GetRuleContext<Clstat_interfacedefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clstat_enumdefContext clstat_enumdef() {
			return GetRuleContext<Clstat_enumdefContext>(0);
		}
		public ClassLevelStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLevelStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassLevelStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassLevelStatContext classLevelStat() {
		ClassLevelStatContext _localctx = new ClassLevelStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_classLevelStat);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				clstat_func1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				clstat_func2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 339;
				clstat_vardecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 340;
				clstat_tabledecon();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 341;
				clstat_classdef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 342;
				clstat_interfacedef();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 343;
				clstat_enumdef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_func1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Clstat_func1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_func1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_func1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_func1Context clstat_func1() {
		Clstat_func1Context _localctx = new Clstat_func1Context(Context, State);
		EnterRule(_localctx, 36, RULE_clstat_func1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(T__17);
			State = 347;
			funcname();
			State = 348;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_func2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Clstat_func2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_func2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_func2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_func2Context clstat_func2() {
		Clstat_func2Context _localctx = new Clstat_func2Context(Context, State);
		EnterRule(_localctx, 38, RULE_clstat_func2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(T__18);
			State = 351;
			Match(T__17);
			State = 352;
			Match(NAME);
			State = 353;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_vardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttnamelistContext attnamelist() {
			return GetRuleContext<AttnamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Clstat_vardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_vardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_vardeclContext clstat_vardecl() {
		Clstat_vardeclContext _localctx = new Clstat_vardeclContext(Context, State);
		EnterRule(_localctx, 40, RULE_clstat_vardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 355;
				Match(T__18);
				}
			}

			State = 358;
			attnamelist();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 359;
				Match(T__1);
				State = 360;
				explist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_tabledeconContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionListContext tableDeconstructionList() {
			return GetRuleContext<TableDeconstructionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Clstat_tabledeconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_tabledecon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_tabledecon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_tabledeconContext clstat_tabledecon() {
		Clstat_tabledeconContext _localctx = new Clstat_tabledeconContext(Context, State);
		EnterRule(_localctx, 42, RULE_clstat_tabledecon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 363;
				Match(T__18);
				}
			}

			State = 366;
			tableDeconstructionList();
			State = 367;
			Match(T__1);
			State = 368;
			explist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_classdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public Clstat_classdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_classdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_classdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_classdefContext clstat_classdef() {
		Clstat_classdefContext _localctx = new Clstat_classdefContext(Context, State);
		EnterRule(_localctx, 44, RULE_clstat_classdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 370;
				Match(T__18);
				}
			}

			State = 373;
			classDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_interfacedefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		public Clstat_interfacedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_interfacedef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_interfacedef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_interfacedefContext clstat_interfacedef() {
		Clstat_interfacedefContext _localctx = new Clstat_interfacedefContext(Context, State);
		EnterRule(_localctx, 46, RULE_clstat_interfacedef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 375;
				Match(T__18);
				}
			}

			State = 378;
			interfaceDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clstat_enumdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public Clstat_enumdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clstat_enumdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClstat_enumdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clstat_enumdefContext clstat_enumdef() {
		Clstat_enumdefContext _localctx = new Clstat_enumdefContext(Context, State);
		EnterRule(_localctx, 48, RULE_clstat_enumdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 380;
				Match(T__18);
				}
			}

			State = 383;
			enumDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttnamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttnameContext[] attname() {
			return GetRuleContexts<AttnameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttnameContext attname(int i) {
			return GetRuleContext<AttnameContext>(i);
		}
		public AttnamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attnamelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttnamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttnamelistContext attnamelist() {
		AttnamelistContext _localctx = new AttnamelistContext(Context, State);
		EnterRule(_localctx, 50, RULE_attnamelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			attname();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 386;
				Match(T__15);
				State = 387;
				attname();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		public AttnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttnameContext attname() {
		AttnameContext _localctx = new AttnameContext(Context, State);
		EnterRule(_localctx, 52, RULE_attname);
		int _la;
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				Match(NAME);
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 394;
					typeAnnotation();
					}
				}

				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 397;
					attrib();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400;
				Match(NAME);
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 401;
					attrib();
					}
				}

				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 404;
					typeAnnotation();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 54, RULE_attrib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(T__19);
			State = 410;
			Match(NAME);
			State = 411;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaststatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QLuaParser.INT, 0); }
		public LaststatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laststat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaststat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaststatContext laststat() {
		LaststatContext _localctx = new LaststatContext(Context, State);
		EnterRule(_localctx, 56, RULE_laststat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 413;
				Match(T__21);
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2323857481744515072L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2143289375L) != 0)) {
					{
					State = 414;
					explist();
					}
				}

				}
				break;
			case T__2:
				{
				State = 417;
				Match(T__2);
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 418;
					Match(INT);
					}
				}

				}
				break;
			case T__3:
				{
				State = 421;
				Match(T__3);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 422;
					Match(INT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 427;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 58, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(T__22);
			State = 431;
			Match(NAME);
			State = 432;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(QLuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(QLuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 60, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(NAME);
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 435;
				Match(T__23);
				State = 436;
				Match(NAME);
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 442;
				Match(T__24);
				State = 443;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 62, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			var();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 447;
				Match(T__15);
				State = 448;
				var();
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(QLuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(QLuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 64, RULE_namelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(NAME);
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 455;
				Match(T__15);
				State = 456;
				Match(NAME);
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 66, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 462;
					exp(0);
					State = 463;
					Match(T__15);
					}
					} 
				}
				State = 469;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 470;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NilableTypeContext nilableType() {
			return GetRuleContext<NilableTypeContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				{
				State = 473;
				Match(T__25);
				}
				break;
			case T__26:
				{
				State = 474;
				Match(T__26);
				}
				break;
			case T__27:
				{
				State = 475;
				Match(T__27);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 476;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case TEMPLATESTRING:
			case LONGSTRING:
				{
				State = 477;
				@string();
				}
				break;
			case T__28:
				{
				State = 478;
				Match(T__28);
				}
				break;
			case T__17:
				{
				State = 479;
				functiondef();
				}
				break;
			case T__31:
			case NAME:
				{
				State = 480;
				prefixexp();
				}
				break;
			case T__35:
				{
				State = 481;
				tableconstructor();
				}
				break;
			case T__53:
			case T__60:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
				{
				State = 482;
				operatorUnary();
				State = 483;
				exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 530;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 528;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 487;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 488;
						Match(T__30);
						State = 489;
						exp(0);
						State = 490;
						Match(T__24);
						State = 491;
						exp(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 493;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 494;
						operatorPower();
						State = 495;
						exp(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 497;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 498;
						operatorMulDivMod();
						State = 499;
						exp(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 501;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 502;
						operatorAddSub();
						State = 503;
						exp(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 505;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 506;
						operatorStrcat();
						State = 507;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 509;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 510;
						operatorComparison();
						State = 511;
						exp(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 513;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 514;
						operatorAnd();
						State = 515;
						exp(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 517;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 518;
						operatorOr();
						State = 519;
						exp(3);
						}
						break;
					case 9:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 521;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 522;
						operatorBitwise();
						State = 523;
						exp(2);
						}
						break;
					case 10:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 525;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 526;
						Match(T__29);
						State = 527;
						nilableType();
						}
						break;
					}
					} 
				}
				State = 532;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 70, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			varOrExp();
			State = 537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 534;
					nameAndArgs();
					}
					} 
				}
				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 72, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			varOrExp();
			State = 542;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 541;
					nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 74, RULE_varOrExp);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				Match(T__31);
				State = 548;
				exp(0);
				State = 549;
				Match(T__32);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 76, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 553;
				Match(NAME);
				}
				break;
			case T__31:
				{
				State = 554;
				Match(T__31);
				State = 555;
				exp(0);
				State = 556;
				Match(T__32);
				State = 557;
				varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 564;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 561;
					varSuffix();
					}
					} 
				}
				State = 566;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 78, RULE_varSuffix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 567;
					nameAndArgs();
					}
					} 
				}
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				{
				State = 573;
				Match(T__33);
				State = 574;
				exp(0);
				State = 575;
				Match(T__34);
				}
				break;
			case T__23:
			case T__30:
				{
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 577;
					Match(T__30);
					}
				}

				State = 580;
				Match(T__23);
				State = 581;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 80, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24 || _la==T__30) {
				{
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 584;
					Match(T__30);
					}
				}

				State = 587;
				Match(T__24);
				State = 588;
				Match(NAME);
				}
			}

			State = 591;
			args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 82, RULE_args);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593;
				Match(T__31);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2323857481744515072L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2143289375L) != 0)) {
					{
					State = 594;
					explist();
					}
				}

				State = 597;
				Match(T__32);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case TEMPLATESTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 599;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 84, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(T__17);
			State = 603;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncheadContext funchead() {
			return GetRuleContext<FuncheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 86, RULE_funcbody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			funchead();
			State = 606;
			block();
			State = 607;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public FuncheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funchead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunchead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncheadContext funchead() {
		FuncheadContext _localctx = new FuncheadContext(Context, State);
		EnterRule(_localctx, 88, RULE_funchead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(T__31);
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==NAME) {
				{
				State = 610;
				parlist();
				}
			}

			State = 613;
			Match(T__32);
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 614;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamVarargContext paramVararg() {
			return GetRuleContext<ParamVarargContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 90, RULE_parlist);
		int _la;
		try {
			int _alt;
			State = 630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				param();
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 618;
						Match(T__15);
						State = 619;
						param();
						}
						} 
					}
					State = 624;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 625;
					Match(T__15);
					State = 626;
					paramVararg();
					}
				}

				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629;
				paramVararg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 92, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(NAME);
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 633;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamVarargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ParamVarargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramVararg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamVararg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamVarargContext paramVararg() {
		ParamVarargContext _localctx = new ParamVarargContext(Context, State);
		EnterRule(_localctx, 94, RULE_paramVararg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(T__28);
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 637;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 96, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(T__35);
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2323857498924384256L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2143289375L) != 0)) {
				{
				State = 641;
				fieldlist();
				}
			}

			State = 644;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 98, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			field();
			State = 652;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 647;
					fieldsep();
					State = 648;
					field();
					}
					} 
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__15) {
				{
				State = 655;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 100, RULE_field);
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				Match(T__33);
				State = 659;
				exp(0);
				State = 660;
				Match(T__34);
				State = 661;
				Match(T__1);
				State = 662;
				exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664;
				Match(NAME);
				State = 665;
				Match(T__1);
				State = 666;
				exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 667;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 102, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 104, RULE_operatorOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			_la = TokenStream.LA(1);
			if ( !(_la==T__37 || _la==T__38) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 106, RULE_operatorAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_la = TokenStream.LA(1);
			if ( !(_la==T__39 || _la==T__40) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 108, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4499201584005120L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 110, RULE_operatorStrcat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_la = TokenStream.LA(1);
			if ( !(_la==T__51 || _la==T__52) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 112, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			_la = TokenStream.LA(1);
			if ( !(_la==T__52 || _la==T__53) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 114, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 540431955284459520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 116, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -576460752303423488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 118, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 31873L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 120, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(T__68);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QLuaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(QLuaParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QLuaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(QLuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 122, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(QLuaParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(QLuaParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(QLuaParser.LONGSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATESTRING() { return GetToken(QLuaParser.TEMPLATESTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 124, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(T__69);
			State = 695;
			Match(NAME);
			State = 696;
			enumBody();
			State = 697;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumPropertyContext[] enumProperty() {
			return GetRuleContexts<EnumPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumPropertyContext enumProperty(int i) {
			return GetRuleContext<EnumPropertyContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 699;
				enumProperty();
				}
				}
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumPropertyContext enumProperty() {
		EnumPropertyContext _localctx = new EnumPropertyContext(Context, State);
		EnterRule(_localctx, 130, RULE_enumProperty);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				Match(NAME);
				State = 707;
				Match(T__1);
				State = 708;
				enumValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 132, RULE_enumValue);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 711;
				Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 713;
				Match(T__27);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 714;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case TEMPLATESTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 715;
				@string();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 6);
				{
				State = 716;
				tableconstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsContext classExtends() {
			return GetRuleContext<ClassExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplementsContext classImplements() {
			return GetRuleContext<ClassImplementsContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(T__70);
			State = 720;
			Match(NAME);
			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__71) {
				{
				State = 721;
				classExtends();
				}
			}

			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__72) {
				{
				State = 724;
				classImplements();
				}
			}

			State = 727;
			classBody();
			State = 728;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public ClassExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtendsContext classExtends() {
		ClassExtendsContext _localctx = new ClassExtendsContext(Context, State);
		EnterRule(_localctx, 136, RULE_classExtends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(T__71);
			State = 731;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassImplementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(QLuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(QLuaParser.NAME, i);
		}
		public ClassImplementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classImplements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassImplements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassImplementsContext classImplements() {
		ClassImplementsContext _localctx = new ClassImplementsContext(Context, State);
		EnterRule(_localctx, 138, RULE_classImplements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(T__72);
			State = 734;
			Match(NAME);
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 735;
				Match(T__15);
				State = 736;
				Match(NAME);
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassLevelStatContext[] classLevelStat() {
			return GetRuleContexts<ClassLevelStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLevelStatContext classLevelStat(int i) {
			return GetRuleContext<ClassLevelStatContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 140, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68720263168L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 65555L) != 0)) {
				{
				{
				State = 742;
				classLevelStat();
				}
				}
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsContext interfaceExtends() {
			return GetRuleContext<InterfaceExtendsContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 142, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(T__73);
			State = 749;
			Match(NAME);
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__71) {
				{
				State = 750;
				interfaceExtends();
				}
			}

			State = 753;
			interfaceBody();
			State = 754;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(QLuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(QLuaParser.NAME, i);
		}
		public InterfaceExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExtends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceExtends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExtendsContext interfaceExtends() {
		InterfaceExtendsContext _localctx = new InterfaceExtendsContext(Context, State);
		EnterRule(_localctx, 144, RULE_interfaceExtends);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			Match(T__71);
			State = 757;
			Match(NAME);
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 758;
				Match(T__15);
				State = 759;
				Match(NAME);
				}
				}
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceStatContext[] interfaceStat() {
			return GetRuleContexts<InterfaceStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceStatContext interfaceStat(int i) {
			return GetRuleContext<InterfaceStatContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 146, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || _la==NAME) {
				{
				{
				State = 765;
				interfaceStat();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFunctionContext interfaceFunction() {
			return GetRuleContext<InterfaceFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFieldContext interfaceField() {
			return GetRuleContext<InterfaceFieldContext>(0);
		}
		public InterfaceStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceStatContext interfaceStat() {
		InterfaceStatContext _localctx = new InterfaceStatContext(Context, State);
		EnterRule(_localctx, 148, RULE_interfaceStat);
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 771;
				interfaceFunction();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 772;
				interfaceField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncheadContext funchead() {
			return GetRuleContext<FuncheadContext>(0);
		}
		public InterfaceFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceFunctionContext interfaceFunction() {
		InterfaceFunctionContext _localctx = new InterfaceFunctionContext(Context, State);
		EnterRule(_localctx, 150, RULE_interfaceFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(T__17);
			State = 776;
			funcname();
			State = 777;
			funchead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public InterfaceFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceFieldContext interfaceField() {
		InterfaceFieldContext _localctx = new InterfaceFieldContext(Context, State);
		EnterRule(_localctx, 152, RULE_interfaceField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(NAME);
			State = 780;
			typeAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorCallArgsContext constructorCallArgs() {
			return GetRuleContext<ConstructorCallArgsContext>(0);
		}
		public ConstructorCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorCallContext constructorCall() {
		ConstructorCallContext _localctx = new ConstructorCallContext(Context, State);
		EnterRule(_localctx, 154, RULE_constructorCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(T__74);
			State = 783;
			constructorCallArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorCallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ConstructorCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorCallArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorCallArgsContext constructorCallArgs() {
		ConstructorCallArgsContext _localctx = new ConstructorCallArgsContext(Context, State);
		EnterRule(_localctx, 156, RULE_constructorCallArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			Match(NAME);
			State = 786;
			Match(T__31);
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2323857481744515072L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2143289375L) != 0)) {
				{
				State = 787;
				explist();
				}
			}

			State = 790;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NilableTypeContext nilableType() {
			return GetRuleContext<NilableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTupleContext typeTuple() {
			return GetRuleContext<TypeTupleContext>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 158, RULE_typeAnnotation);
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				Match(T__24);
				State = 793;
				nilableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794;
				Match(T__24);
				State = 795;
				typeTuple();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTupleContext typeTuple() {
		TypeTupleContext _localctx = new TypeTupleContext(Context, State);
		EnterRule(_localctx, 160, RULE_typeTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			Match(T__31);
			State = 799;
			type();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 800;
				Match(T__15);
				State = 801;
				type();
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 807;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NilableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public NilableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nilableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NilableTypeContext nilableType() {
		NilableTypeContext _localctx = new NilableTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_nilableType);
		try {
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809;
				type();
				State = 810;
				Match(T__75);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 812;
				type();
				State = 813;
				Match(T__30);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 815;
				Match(T__30);
				State = 816;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 817;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_type);
		try {
			State = 825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 820;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				basicType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 822;
				tableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 823;
				arrayType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 824;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeContext : ParserRuleContext {
		public BasicTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeContext basicType() {
		BasicTypeContext _localctx = new BasicTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_basicType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(T__31);
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==NAME) {
				{
				State = 830;
				parlist();
				}
			}

			State = 833;
			Match(T__32);
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 834;
				typeAnnotation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFieldContext[] tableField() {
			return GetRuleContexts<TableFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFieldContext tableField(int i) {
			return GetRuleContext<TableFieldContext>(i);
		}
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(T__35);
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==NAME) {
				{
				State = 838;
				tableField();
				State = 843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 839;
					Match(T__15);
					State = 840;
					tableField();
					}
					}
					State = 845;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 848;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		public TableFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFieldContext tableField() {
		TableFieldContext _localctx = new TableFieldContext(Context, State);
		EnterRule(_localctx, 172, RULE_tableField);
		try {
			State = 860;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850;
				Match(T__33);
				State = 851;
				exp(0);
				State = 852;
				Match(T__34);
				State = 853;
				Match(T__24);
				State = 854;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 856;
				Match(NAME);
				State = 857;
				Match(T__24);
				State = 858;
				type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 859;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeForArrayContext baseTypeForArray() {
			return GetRuleContext<BaseTypeForArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_arrayType);
		int _la;
		try {
			State = 877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__35:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 862;
				baseTypeForArray();
				State = 863;
				Match(T__33);
				State = 864;
				Match(T__34);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				Match(T__33);
				State = 867;
				type();
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 868;
					Match(T__15);
					State = 869;
					type();
					}
					}
					State = 874;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 875;
				Match(T__34);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeForArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public BaseTypeForArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypeForArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypeForArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeForArrayContext baseTypeForArray() {
		BaseTypeForArrayContext _localctx = new BaseTypeForArrayContext(Context, State);
		EnterRule(_localctx, 176, RULE_baseTypeForArray);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 879;
				Match(NAME);
				}
				break;
			case T__17:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
				EnterOuterAlt(_localctx, 2);
				{
				State = 880;
				basicType();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 3);
				{
				State = 881;
				tableType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeconstructionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionContext[] tableDeconstruction() {
			return GetRuleContexts<TableDeconstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionContext tableDeconstruction(int i) {
			return GetRuleContext<TableDeconstructionContext>(i);
		}
		public TableDeconstructionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeconstructionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeconstructionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeconstructionListContext tableDeconstructionList() {
		TableDeconstructionListContext _localctx = new TableDeconstructionListContext(Context, State);
		EnterRule(_localctx, 178, RULE_tableDeconstructionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			tableDeconstruction();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 885;
				Match(T__15);
				State = 886;
				tableDeconstruction();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeconstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionFieldContext[] tableDeconstructionField() {
			return GetRuleContexts<TableDeconstructionFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionFieldContext tableDeconstructionField(int i) {
			return GetRuleContext<TableDeconstructionFieldContext>(i);
		}
		public TableDeconstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeconstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeconstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeconstructionContext tableDeconstruction() {
		TableDeconstructionContext _localctx = new TableDeconstructionContext(Context, State);
		EnterRule(_localctx, 180, RULE_tableDeconstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(T__35);
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 4503599627370501L) != 0)) {
				{
				State = 893;
				tableDeconstructionField();
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 894;
					Match(T__15);
					State = 895;
					tableDeconstructionField();
					}
					}
					State = 900;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 903;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeconstructionFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(QLuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(QLuaParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableDeconstructionContext tableDeconstruction() {
			return GetRuleContext<TableDeconstructionContext>(0);
		}
		public TableDeconstructionFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeconstructionField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeconstructionField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeconstructionFieldContext tableDeconstructionField() {
		TableDeconstructionFieldContext _localctx = new TableDeconstructionFieldContext(Context, State);
		EnterRule(_localctx, 182, RULE_tableDeconstructionField);
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 905;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 906;
				Match(NAME);
				State = 907;
				Match(T__29);
				State = 908;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 909;
				Match(T__33);
				State = 910;
				exp(0);
				State = 911;
				Match(T__34);
				State = 912;
				Match(T__29);
				State = 913;
				Match(NAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 915;
				tableDeconstruction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLevelDeclStatContext moduleLevelDeclStat() {
			return GetRuleContext<ModuleLevelDeclStatContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_declaration);
		try {
			State = 920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918;
				moduleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919;
				moduleLevelDeclStat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclBodyContext moduleDeclBody() {
			return GetRuleContext<ModuleDeclBodyContext>(0);
		}
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_moduleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(T__83);
			State = 923;
			Match(T__84);
			State = 924;
			@string();
			State = 925;
			moduleDeclBody();
			State = 926;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLevelDeclStatContext[] moduleLevelDeclStat() {
			return GetRuleContexts<ModuleLevelDeclStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLevelDeclStatContext moduleLevelDeclStat(int i) {
			return GetRuleContext<ModuleLevelDeclStatContext>(i);
		}
		public ModuleDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclBodyContext moduleDeclBody() {
		ModuleDeclBodyContext _localctx = new ModuleDeclBodyContext(Context, State);
		EnterRule(_localctx, 188, RULE_moduleDeclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__83) {
				{
				{
				State = 928;
				moduleLevelDeclStat();
				}
				}
				State = 933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleLevelDeclStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFunctionContext interfaceFunction() {
			return GetRuleContext<InterfaceFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFieldContext interfaceField() {
			return GetRuleContext<InterfaceFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ModuleLevelDeclStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleLevelDeclStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleLevelDeclStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleLevelDeclStatContext moduleLevelDeclStat() {
		ModuleLevelDeclStatContext _localctx = new ModuleLevelDeclStatContext(Context, State);
		EnterRule(_localctx, 190, RULE_moduleLevelDeclStat);
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934;
				Match(T__83);
				State = 935;
				interfaceFunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 936;
				Match(T__83);
				State = 937;
				interfaceField();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 938;
				classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 939;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 940;
				enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclBodyContext classDeclBody() {
			return GetRuleContext<ClassDeclBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsContext classExtends() {
			return GetRuleContext<ClassExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplementsContext classImplements() {
			return GetRuleContext<ClassImplementsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 192, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			Match(T__83);
			State = 944;
			Match(T__70);
			State = 945;
			Match(NAME);
			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__71) {
				{
				State = 946;
				classExtends();
				}
			}

			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__72) {
				{
				State = 949;
				classImplements();
				}
			}

			State = 952;
			classDeclBody();
			State = 953;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLevelDeclStatContext[] moduleLevelDeclStat() {
			return GetRuleContexts<ModuleLevelDeclStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleLevelDeclStatContext moduleLevelDeclStat(int i) {
			return GetRuleContext<ModuleLevelDeclStatContext>(i);
		}
		public ClassDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclBodyContext classDeclBody() {
		ClassDeclBodyContext _localctx = new ClassDeclBodyContext(Context, State);
		EnterRule(_localctx, 194, RULE_classDeclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__83) {
				{
				{
				State = 955;
				moduleLevelDeclStat();
				}
				}
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclBodyContext interfaceDeclBody() {
			return GetRuleContext<InterfaceDeclBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsContext interfaceExtends() {
			return GetRuleContext<InterfaceExtendsContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(T__83);
			State = 962;
			Match(T__73);
			State = 963;
			Match(NAME);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__71) {
				{
				State = 964;
				interfaceExtends();
				}
			}

			State = 967;
			interfaceDeclBody();
			State = 968;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclStatContext[] interfaceDeclStat() {
			return GetRuleContexts<InterfaceDeclStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclStatContext interfaceDeclStat(int i) {
			return GetRuleContext<InterfaceDeclStatContext>(i);
		}
		public InterfaceDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclBodyContext interfaceDeclBody() {
		InterfaceDeclBodyContext _localctx = new InterfaceDeclBodyContext(Context, State);
		EnterRule(_localctx, 198, RULE_interfaceDeclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__83) {
				{
				{
				State = 970;
				interfaceDeclStat();
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFunctionContext interfaceFunction() {
			return GetRuleContext<InterfaceFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFieldContext interfaceField() {
			return GetRuleContext<InterfaceFieldContext>(0);
		}
		public InterfaceDeclStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclStatContext interfaceDeclStat() {
		InterfaceDeclStatContext _localctx = new InterfaceDeclStatContext(Context, State);
		EnterRule(_localctx, 200, RULE_interfaceDeclStat);
		try {
			State = 980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 976;
				Match(T__83);
				State = 977;
				interfaceFunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978;
				Match(T__83);
				State = 979;
				interfaceField();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclBodyContext enumDeclBody() {
			return GetRuleContext<EnumDeclBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 202, RULE_enumDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(T__83);
			State = 983;
			Match(T__69);
			State = 984;
			Match(NAME);
			State = 985;
			enumDeclBody();
			State = 986;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumPropertyContext[] enumProperty() {
			return GetRuleContexts<EnumPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumPropertyContext enumProperty(int i) {
			return GetRuleContext<EnumPropertyContext>(i);
		}
		public EnumDeclBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLuaVisitor<TResult> typedVisitor = visitor as IQLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclBodyContext enumDeclBody() {
		EnumDeclBodyContext _localctx = new EnumDeclBodyContext(Context, State);
		EnterRule(_localctx, 204, RULE_enumDeclBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 988;
				enumProperty();
				}
				}
				State = 993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,995,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,1,0,1,0,1,1,5,1,211,
		8,1,10,1,12,1,214,9,1,1,1,5,1,217,8,1,10,1,12,1,220,9,1,1,1,3,1,223,8,
		1,1,1,5,1,226,8,1,10,1,12,1,229,9,1,1,1,5,1,232,8,1,10,1,12,1,235,9,1,
		1,1,3,1,238,8,1,3,1,240,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,257,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,3,5,267,
		8,5,1,6,1,6,3,6,271,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,293,8,11,10,11,12,11,296,
		9,11,1,11,3,11,299,8,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
		15,324,8,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,345,8,17,1,18,1,18,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,1,20,3,20,357,8,20,1,20,1,20,1,20,3,20,362,8,20,
		1,21,3,21,365,8,21,1,21,1,21,1,21,1,21,1,22,3,22,372,8,22,1,22,1,22,1,
		23,3,23,377,8,23,1,23,1,23,1,24,3,24,382,8,24,1,24,1,24,1,25,1,25,1,25,
		5,25,389,8,25,10,25,12,25,392,9,25,1,26,1,26,3,26,396,8,26,1,26,3,26,399,
		8,26,1,26,1,26,3,26,403,8,26,1,26,3,26,406,8,26,3,26,408,8,26,1,27,1,27,
		1,27,1,27,1,28,1,28,3,28,416,8,28,1,28,1,28,3,28,420,8,28,1,28,1,28,3,
		28,424,8,28,3,28,426,8,28,1,28,3,28,429,8,28,1,29,1,29,1,29,1,29,1,30,
		1,30,1,30,5,30,438,8,30,10,30,12,30,441,9,30,1,30,1,30,3,30,445,8,30,1,
		31,1,31,1,31,5,31,450,8,31,10,31,12,31,453,9,31,1,32,1,32,1,32,5,32,458,
		8,32,10,32,12,32,461,9,32,1,33,1,33,1,33,5,33,466,8,33,10,33,12,33,469,
		9,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,3,34,486,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,5,34,529,8,34,10,34,12,34,532,9,34,1,35,1,35,5,35,536,
		8,35,10,35,12,35,539,9,35,1,36,1,36,4,36,543,8,36,11,36,12,36,544,1,37,
		1,37,1,37,1,37,1,37,3,37,552,8,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,560,
		8,38,1,38,5,38,563,8,38,10,38,12,38,566,9,38,1,39,5,39,569,8,39,10,39,
		12,39,572,9,39,1,39,1,39,1,39,1,39,1,39,3,39,579,8,39,1,39,1,39,3,39,583,
		8,39,1,40,3,40,586,8,40,1,40,1,40,3,40,590,8,40,1,40,1,40,1,41,1,41,3,
		41,596,8,41,1,41,1,41,1,41,3,41,601,8,41,1,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,44,1,44,3,44,612,8,44,1,44,1,44,3,44,616,8,44,1,45,1,45,1,45,5,
		45,621,8,45,10,45,12,45,624,9,45,1,45,1,45,3,45,628,8,45,1,45,3,45,631,
		8,45,1,46,1,46,3,46,635,8,46,1,47,1,47,3,47,639,8,47,1,48,1,48,3,48,643,
		8,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,651,8,49,10,49,12,49,654,9,49,
		1,49,3,49,657,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
		50,669,8,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
		1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,
		1,63,1,63,1,63,1,64,5,64,701,8,64,10,64,12,64,704,9,64,1,65,1,65,1,65,
		1,65,3,65,710,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,718,8,66,1,67,1,
		67,1,67,3,67,723,8,67,1,67,3,67,726,8,67,1,67,1,67,1,67,1,68,1,68,1,68,
		1,69,1,69,1,69,1,69,5,69,738,8,69,10,69,12,69,741,9,69,1,70,5,70,744,8,
		70,10,70,12,70,747,9,70,1,71,1,71,1,71,3,71,752,8,71,1,71,1,71,1,71,1,
		72,1,72,1,72,1,72,5,72,761,8,72,10,72,12,72,764,9,72,1,73,5,73,767,8,73,
		10,73,12,73,770,9,73,1,74,1,74,3,74,774,8,74,1,75,1,75,1,75,1,75,1,76,
		1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,3,78,789,8,78,1,78,1,78,1,79,1,
		79,1,79,1,79,3,79,797,8,79,1,80,1,80,1,80,1,80,5,80,803,8,80,10,80,12,
		80,806,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		819,8,81,1,82,1,82,1,82,1,82,1,82,3,82,826,8,82,1,83,1,83,1,84,1,84,3,
		84,832,8,84,1,84,1,84,3,84,836,8,84,1,85,1,85,1,85,1,85,5,85,842,8,85,
		10,85,12,85,845,9,85,3,85,847,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,3,86,861,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,
		87,1,87,5,87,871,8,87,10,87,12,87,874,9,87,1,87,1,87,3,87,878,8,87,1,88,
		1,88,1,88,3,88,883,8,88,1,89,1,89,1,89,5,89,888,8,89,10,89,12,89,891,9,
		89,1,90,1,90,1,90,1,90,5,90,897,8,90,10,90,12,90,900,9,90,3,90,902,8,90,
		1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,
		917,8,91,1,92,1,92,3,92,921,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,94,5,
		94,930,8,94,10,94,12,94,933,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,
		95,942,8,95,1,96,1,96,1,96,1,96,3,96,948,8,96,1,96,3,96,951,8,96,1,96,
		1,96,1,96,1,97,5,97,957,8,97,10,97,12,97,960,9,97,1,98,1,98,1,98,1,98,
		3,98,966,8,98,1,98,1,98,1,98,1,99,5,99,972,8,99,10,99,12,99,975,9,99,1,
		100,1,100,1,100,1,100,3,100,981,8,100,1,101,1,101,1,101,1,101,1,101,1,
		101,1,102,5,102,990,8,102,10,102,12,102,993,9,102,1,102,0,1,68,103,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,0,12,2,
		0,1,1,16,16,1,0,38,39,1,0,40,41,2,0,20,21,42,51,1,0,52,53,1,0,53,54,1,
		0,55,58,1,0,59,63,3,0,54,54,61,61,64,68,1,0,91,94,1,0,87,90,2,0,18,18,
		77,83,1044,0,206,1,0,0,0,2,239,1,0,0,0,4,256,1,0,0,0,6,258,1,0,0,0,8,260,
		1,0,0,0,10,264,1,0,0,0,12,268,1,0,0,0,14,272,1,0,0,0,16,275,1,0,0,0,18,
		279,1,0,0,0,20,285,1,0,0,0,22,290,1,0,0,0,24,302,1,0,0,0,26,307,1,0,0,
		0,28,312,1,0,0,0,30,315,1,0,0,0,32,329,1,0,0,0,34,344,1,0,0,0,36,346,1,
		0,0,0,38,350,1,0,0,0,40,356,1,0,0,0,42,364,1,0,0,0,44,371,1,0,0,0,46,376,
		1,0,0,0,48,381,1,0,0,0,50,385,1,0,0,0,52,407,1,0,0,0,54,409,1,0,0,0,56,
		425,1,0,0,0,58,430,1,0,0,0,60,434,1,0,0,0,62,446,1,0,0,0,64,454,1,0,0,
		0,66,467,1,0,0,0,68,485,1,0,0,0,70,533,1,0,0,0,72,540,1,0,0,0,74,551,1,
		0,0,0,76,559,1,0,0,0,78,570,1,0,0,0,80,589,1,0,0,0,82,600,1,0,0,0,84,602,
		1,0,0,0,86,605,1,0,0,0,88,609,1,0,0,0,90,630,1,0,0,0,92,632,1,0,0,0,94,
		636,1,0,0,0,96,640,1,0,0,0,98,646,1,0,0,0,100,668,1,0,0,0,102,670,1,0,
		0,0,104,672,1,0,0,0,106,674,1,0,0,0,108,676,1,0,0,0,110,678,1,0,0,0,112,
		680,1,0,0,0,114,682,1,0,0,0,116,684,1,0,0,0,118,686,1,0,0,0,120,688,1,
		0,0,0,122,690,1,0,0,0,124,692,1,0,0,0,126,694,1,0,0,0,128,702,1,0,0,0,
		130,709,1,0,0,0,132,717,1,0,0,0,134,719,1,0,0,0,136,730,1,0,0,0,138,733,
		1,0,0,0,140,745,1,0,0,0,142,748,1,0,0,0,144,756,1,0,0,0,146,768,1,0,0,
		0,148,773,1,0,0,0,150,775,1,0,0,0,152,779,1,0,0,0,154,782,1,0,0,0,156,
		785,1,0,0,0,158,796,1,0,0,0,160,798,1,0,0,0,162,818,1,0,0,0,164,825,1,
		0,0,0,166,827,1,0,0,0,168,829,1,0,0,0,170,837,1,0,0,0,172,860,1,0,0,0,
		174,877,1,0,0,0,176,882,1,0,0,0,178,884,1,0,0,0,180,892,1,0,0,0,182,916,
		1,0,0,0,184,920,1,0,0,0,186,922,1,0,0,0,188,931,1,0,0,0,190,941,1,0,0,
		0,192,943,1,0,0,0,194,958,1,0,0,0,196,961,1,0,0,0,198,973,1,0,0,0,200,
		980,1,0,0,0,202,982,1,0,0,0,204,991,1,0,0,0,206,207,3,2,1,0,207,208,5,
		0,0,1,208,1,1,0,0,0,209,211,3,4,2,0,210,209,1,0,0,0,211,214,1,0,0,0,212,
		210,1,0,0,0,212,213,1,0,0,0,213,218,1,0,0,0,214,212,1,0,0,0,215,217,3,
		184,92,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,
		0,219,222,1,0,0,0,220,218,1,0,0,0,221,223,3,56,28,0,222,221,1,0,0,0,222,
		223,1,0,0,0,223,240,1,0,0,0,224,226,3,184,92,0,225,224,1,0,0,0,226,229,
		1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,233,1,0,0,0,229,227,1,0,0,
		0,230,232,3,4,2,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,
		234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,236,238,3,56,28,0,237,236,
		1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,212,1,0,0,0,239,227,1,0,0,
		0,240,3,1,0,0,0,241,257,3,6,3,0,242,257,3,8,4,0,243,257,3,72,36,0,244,
		257,3,58,29,0,245,257,3,10,5,0,246,257,3,12,6,0,247,257,3,14,7,0,248,257,
		3,16,8,0,249,257,3,18,9,0,250,257,3,20,10,0,251,257,3,22,11,0,252,257,
		3,30,15,0,253,257,3,32,16,0,254,257,3,34,17,0,255,257,3,154,77,0,256,241,
		1,0,0,0,256,242,1,0,0,0,256,243,1,0,0,0,256,244,1,0,0,0,256,245,1,0,0,
		0,256,246,1,0,0,0,256,247,1,0,0,0,256,248,1,0,0,0,256,249,1,0,0,0,256,
		250,1,0,0,0,256,251,1,0,0,0,256,252,1,0,0,0,256,253,1,0,0,0,256,254,1,
		0,0,0,256,255,1,0,0,0,257,5,1,0,0,0,258,259,5,1,0,0,259,7,1,0,0,0,260,
		261,3,62,31,0,261,262,5,2,0,0,262,263,3,66,33,0,263,9,1,0,0,0,264,266,
		5,3,0,0,265,267,5,91,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,11,1,0,0,
		0,268,270,5,4,0,0,269,271,5,91,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,
		13,1,0,0,0,272,273,5,5,0,0,273,274,5,86,0,0,274,15,1,0,0,0,275,276,5,6,
		0,0,276,277,3,2,1,0,277,278,5,7,0,0,278,17,1,0,0,0,279,280,5,8,0,0,280,
		281,3,68,34,0,281,282,5,6,0,0,282,283,3,2,1,0,283,284,5,7,0,0,284,19,1,
		0,0,0,285,286,5,9,0,0,286,287,3,2,1,0,287,288,5,10,0,0,288,289,3,68,34,
		0,289,21,1,0,0,0,290,294,3,24,12,0,291,293,3,26,13,0,292,291,1,0,0,0,293,
		296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,298,1,0,0,0,296,294,1,
		0,0,0,297,299,3,28,14,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,
		0,300,301,5,7,0,0,301,23,1,0,0,0,302,303,5,11,0,0,303,304,3,68,34,0,304,
		305,5,12,0,0,305,306,3,2,1,0,306,25,1,0,0,0,307,308,5,13,0,0,308,309,3,
		68,34,0,309,310,5,12,0,0,310,311,3,2,1,0,311,27,1,0,0,0,312,313,5,14,0,
		0,313,314,3,2,1,0,314,29,1,0,0,0,315,316,5,15,0,0,316,317,5,86,0,0,317,
		318,5,2,0,0,318,319,3,68,34,0,319,320,5,16,0,0,320,323,3,68,34,0,321,322,
		5,16,0,0,322,324,3,68,34,0,323,321,1,0,0,0,323,324,1,0,0,0,324,325,1,0,
		0,0,325,326,5,6,0,0,326,327,3,2,1,0,327,328,5,7,0,0,328,31,1,0,0,0,329,
		330,5,15,0,0,330,331,3,64,32,0,331,332,5,17,0,0,332,333,3,66,33,0,333,
		334,5,6,0,0,334,335,3,2,1,0,335,336,5,7,0,0,336,33,1,0,0,0,337,345,3,36,
		18,0,338,345,3,38,19,0,339,345,3,40,20,0,340,345,3,42,21,0,341,345,3,44,
		22,0,342,345,3,46,23,0,343,345,3,48,24,0,344,337,1,0,0,0,344,338,1,0,0,
		0,344,339,1,0,0,0,344,340,1,0,0,0,344,341,1,0,0,0,344,342,1,0,0,0,344,
		343,1,0,0,0,345,35,1,0,0,0,346,347,5,18,0,0,347,348,3,60,30,0,348,349,
		3,86,43,0,349,37,1,0,0,0,350,351,5,19,0,0,351,352,5,18,0,0,352,353,5,86,
		0,0,353,354,3,86,43,0,354,39,1,0,0,0,355,357,5,19,0,0,356,355,1,0,0,0,
		356,357,1,0,0,0,357,358,1,0,0,0,358,361,3,50,25,0,359,360,5,2,0,0,360,
		362,3,66,33,0,361,359,1,0,0,0,361,362,1,0,0,0,362,41,1,0,0,0,363,365,5,
		19,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,3,178,89,
		0,367,368,5,2,0,0,368,369,3,66,33,0,369,43,1,0,0,0,370,372,5,19,0,0,371,
		370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,3,134,67,0,374,45,
		1,0,0,0,375,377,5,19,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,
		0,378,379,3,142,71,0,379,47,1,0,0,0,380,382,5,19,0,0,381,380,1,0,0,0,381,
		382,1,0,0,0,382,383,1,0,0,0,383,384,3,126,63,0,384,49,1,0,0,0,385,390,
		3,52,26,0,386,387,5,16,0,0,387,389,3,52,26,0,388,386,1,0,0,0,389,392,1,
		0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,51,1,0,0,0,392,390,1,0,0,0,393,
		395,5,86,0,0,394,396,3,158,79,0,395,394,1,0,0,0,395,396,1,0,0,0,396,398,
		1,0,0,0,397,399,3,54,27,0,398,397,1,0,0,0,398,399,1,0,0,0,399,408,1,0,
		0,0,400,402,5,86,0,0,401,403,3,54,27,0,402,401,1,0,0,0,402,403,1,0,0,0,
		403,405,1,0,0,0,404,406,3,158,79,0,405,404,1,0,0,0,405,406,1,0,0,0,406,
		408,1,0,0,0,407,393,1,0,0,0,407,400,1,0,0,0,408,53,1,0,0,0,409,410,5,20,
		0,0,410,411,5,86,0,0,411,412,5,21,0,0,412,55,1,0,0,0,413,415,5,22,0,0,
		414,416,3,66,33,0,415,414,1,0,0,0,415,416,1,0,0,0,416,426,1,0,0,0,417,
		419,5,3,0,0,418,420,5,91,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,426,1,
		0,0,0,421,423,5,4,0,0,422,424,5,91,0,0,423,422,1,0,0,0,423,424,1,0,0,0,
		424,426,1,0,0,0,425,413,1,0,0,0,425,417,1,0,0,0,425,421,1,0,0,0,426,428,
		1,0,0,0,427,429,5,1,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,57,1,0,0,0,
		430,431,5,23,0,0,431,432,5,86,0,0,432,433,5,23,0,0,433,59,1,0,0,0,434,
		439,5,86,0,0,435,436,5,24,0,0,436,438,5,86,0,0,437,435,1,0,0,0,438,441,
		1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,444,1,0,0,0,441,439,1,0,0,
		0,442,443,5,25,0,0,443,445,5,86,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,
		61,1,0,0,0,446,451,3,76,38,0,447,448,5,16,0,0,448,450,3,76,38,0,449,447,
		1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,63,1,0,0,0,
		453,451,1,0,0,0,454,459,5,86,0,0,455,456,5,16,0,0,456,458,5,86,0,0,457,
		455,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,65,1,0,
		0,0,461,459,1,0,0,0,462,463,3,68,34,0,463,464,5,16,0,0,464,466,1,0,0,0,
		465,462,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,
		1,0,0,0,469,467,1,0,0,0,470,471,3,68,34,0,471,67,1,0,0,0,472,473,6,34,
		-1,0,473,486,5,26,0,0,474,486,5,27,0,0,475,486,5,28,0,0,476,486,3,122,
		61,0,477,486,3,124,62,0,478,486,5,29,0,0,479,486,3,84,42,0,480,486,3,70,
		35,0,481,486,3,96,48,0,482,483,3,118,59,0,483,484,3,68,34,8,484,486,1,
		0,0,0,485,472,1,0,0,0,485,474,1,0,0,0,485,475,1,0,0,0,485,476,1,0,0,0,
		485,477,1,0,0,0,485,478,1,0,0,0,485,479,1,0,0,0,485,480,1,0,0,0,485,481,
		1,0,0,0,485,482,1,0,0,0,486,530,1,0,0,0,487,488,10,11,0,0,488,489,5,31,
		0,0,489,490,3,68,34,0,490,491,5,25,0,0,491,492,3,68,34,12,492,529,1,0,
		0,0,493,494,10,9,0,0,494,495,3,120,60,0,495,496,3,68,34,9,496,529,1,0,
		0,0,497,498,10,7,0,0,498,499,3,114,57,0,499,500,3,68,34,8,500,529,1,0,
		0,0,501,502,10,6,0,0,502,503,3,112,56,0,503,504,3,68,34,7,504,529,1,0,
		0,0,505,506,10,5,0,0,506,507,3,110,55,0,507,508,3,68,34,5,508,529,1,0,
		0,0,509,510,10,4,0,0,510,511,3,108,54,0,511,512,3,68,34,5,512,529,1,0,
		0,0,513,514,10,3,0,0,514,515,3,106,53,0,515,516,3,68,34,4,516,529,1,0,
		0,0,517,518,10,2,0,0,518,519,3,104,52,0,519,520,3,68,34,3,520,529,1,0,
		0,0,521,522,10,1,0,0,522,523,3,116,58,0,523,524,3,68,34,2,524,529,1,0,
		0,0,525,526,10,12,0,0,526,527,5,30,0,0,527,529,3,162,81,0,528,487,1,0,
		0,0,528,493,1,0,0,0,528,497,1,0,0,0,528,501,1,0,0,0,528,505,1,0,0,0,528,
		509,1,0,0,0,528,513,1,0,0,0,528,517,1,0,0,0,528,521,1,0,0,0,528,525,1,
		0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,69,1,0,0,0,532,
		530,1,0,0,0,533,537,3,74,37,0,534,536,3,80,40,0,535,534,1,0,0,0,536,539,
		1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,71,1,0,0,0,539,537,1,0,0,0,
		540,542,3,74,37,0,541,543,3,80,40,0,542,541,1,0,0,0,543,544,1,0,0,0,544,
		542,1,0,0,0,544,545,1,0,0,0,545,73,1,0,0,0,546,552,3,76,38,0,547,548,5,
		32,0,0,548,549,3,68,34,0,549,550,5,33,0,0,550,552,1,0,0,0,551,546,1,0,
		0,0,551,547,1,0,0,0,552,75,1,0,0,0,553,560,5,86,0,0,554,555,5,32,0,0,555,
		556,3,68,34,0,556,557,5,33,0,0,557,558,3,78,39,0,558,560,1,0,0,0,559,553,
		1,0,0,0,559,554,1,0,0,0,560,564,1,0,0,0,561,563,3,78,39,0,562,561,1,0,
		0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,77,1,0,0,0,566,
		564,1,0,0,0,567,569,3,80,40,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,
		1,0,0,0,570,571,1,0,0,0,571,582,1,0,0,0,572,570,1,0,0,0,573,574,5,34,0,
		0,574,575,3,68,34,0,575,576,5,35,0,0,576,583,1,0,0,0,577,579,5,31,0,0,
		578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,24,0,0,581,583,
		5,86,0,0,582,573,1,0,0,0,582,578,1,0,0,0,583,79,1,0,0,0,584,586,5,31,0,
		0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,5,25,0,0,588,
		590,5,86,0,0,589,585,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,3,
		82,41,0,592,81,1,0,0,0,593,595,5,32,0,0,594,596,3,66,33,0,595,594,1,0,
		0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,601,5,33,0,0,598,601,3,96,48,0,
		599,601,3,124,62,0,600,593,1,0,0,0,600,598,1,0,0,0,600,599,1,0,0,0,601,
		83,1,0,0,0,602,603,5,18,0,0,603,604,3,86,43,0,604,85,1,0,0,0,605,606,3,
		88,44,0,606,607,3,2,1,0,607,608,5,7,0,0,608,87,1,0,0,0,609,611,5,32,0,
		0,610,612,3,90,45,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,
		615,5,33,0,0,614,616,3,158,79,0,615,614,1,0,0,0,615,616,1,0,0,0,616,89,
		1,0,0,0,617,622,3,92,46,0,618,619,5,16,0,0,619,621,3,92,46,0,620,618,1,
		0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,627,1,0,0,0,
		624,622,1,0,0,0,625,626,5,16,0,0,626,628,3,94,47,0,627,625,1,0,0,0,627,
		628,1,0,0,0,628,631,1,0,0,0,629,631,3,94,47,0,630,617,1,0,0,0,630,629,
		1,0,0,0,631,91,1,0,0,0,632,634,5,86,0,0,633,635,3,158,79,0,634,633,1,0,
		0,0,634,635,1,0,0,0,635,93,1,0,0,0,636,638,5,29,0,0,637,639,3,158,79,0,
		638,637,1,0,0,0,638,639,1,0,0,0,639,95,1,0,0,0,640,642,5,36,0,0,641,643,
		3,98,49,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,5,37,
		0,0,645,97,1,0,0,0,646,652,3,100,50,0,647,648,3,102,51,0,648,649,3,100,
		50,0,649,651,1,0,0,0,650,647,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,
		653,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,655,657,3,102,51,0,656,655,
		1,0,0,0,656,657,1,0,0,0,657,99,1,0,0,0,658,659,5,34,0,0,659,660,3,68,34,
		0,660,661,5,35,0,0,661,662,5,2,0,0,662,663,3,68,34,0,663,669,1,0,0,0,664,
		665,5,86,0,0,665,666,5,2,0,0,666,669,3,68,34,0,667,669,3,68,34,0,668,658,
		1,0,0,0,668,664,1,0,0,0,668,667,1,0,0,0,669,101,1,0,0,0,670,671,7,0,0,
		0,671,103,1,0,0,0,672,673,7,1,0,0,673,105,1,0,0,0,674,675,7,2,0,0,675,
		107,1,0,0,0,676,677,7,3,0,0,677,109,1,0,0,0,678,679,7,4,0,0,679,111,1,
		0,0,0,680,681,7,5,0,0,681,113,1,0,0,0,682,683,7,6,0,0,683,115,1,0,0,0,
		684,685,7,7,0,0,685,117,1,0,0,0,686,687,7,8,0,0,687,119,1,0,0,0,688,689,
		5,69,0,0,689,121,1,0,0,0,690,691,7,9,0,0,691,123,1,0,0,0,692,693,7,10,
		0,0,693,125,1,0,0,0,694,695,5,70,0,0,695,696,5,86,0,0,696,697,3,128,64,
		0,697,698,5,7,0,0,698,127,1,0,0,0,699,701,3,130,65,0,700,699,1,0,0,0,701,
		704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,129,1,0,0,0,704,702,1,
		0,0,0,705,710,5,86,0,0,706,707,5,86,0,0,707,708,5,2,0,0,708,710,3,132,
		66,0,709,705,1,0,0,0,709,706,1,0,0,0,710,131,1,0,0,0,711,718,5,26,0,0,
		712,718,5,27,0,0,713,718,5,28,0,0,714,718,3,122,61,0,715,718,3,124,62,
		0,716,718,3,96,48,0,717,711,1,0,0,0,717,712,1,0,0,0,717,713,1,0,0,0,717,
		714,1,0,0,0,717,715,1,0,0,0,717,716,1,0,0,0,718,133,1,0,0,0,719,720,5,
		71,0,0,720,722,5,86,0,0,721,723,3,136,68,0,722,721,1,0,0,0,722,723,1,0,
		0,0,723,725,1,0,0,0,724,726,3,138,69,0,725,724,1,0,0,0,725,726,1,0,0,0,
		726,727,1,0,0,0,727,728,3,140,70,0,728,729,5,7,0,0,729,135,1,0,0,0,730,
		731,5,72,0,0,731,732,5,86,0,0,732,137,1,0,0,0,733,734,5,73,0,0,734,739,
		5,86,0,0,735,736,5,16,0,0,736,738,5,86,0,0,737,735,1,0,0,0,738,741,1,0,
		0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,139,1,0,0,0,741,739,1,0,0,0,742,
		744,3,34,17,0,743,742,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,
		1,0,0,0,746,141,1,0,0,0,747,745,1,0,0,0,748,749,5,74,0,0,749,751,5,86,
		0,0,750,752,3,144,72,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,
		753,754,3,146,73,0,754,755,5,7,0,0,755,143,1,0,0,0,756,757,5,72,0,0,757,
		762,5,86,0,0,758,759,5,16,0,0,759,761,5,86,0,0,760,758,1,0,0,0,761,764,
		1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,145,1,0,0,0,764,762,1,0,0,
		0,765,767,3,148,74,0,766,765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,
		769,1,0,0,0,769,147,1,0,0,0,770,768,1,0,0,0,771,774,3,150,75,0,772,774,
		3,152,76,0,773,771,1,0,0,0,773,772,1,0,0,0,774,149,1,0,0,0,775,776,5,18,
		0,0,776,777,3,60,30,0,777,778,3,88,44,0,778,151,1,0,0,0,779,780,5,86,0,
		0,780,781,3,158,79,0,781,153,1,0,0,0,782,783,5,75,0,0,783,784,3,156,78,
		0,784,155,1,0,0,0,785,786,5,86,0,0,786,788,5,32,0,0,787,789,3,66,33,0,
		788,787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,5,33,0,0,791,157,
		1,0,0,0,792,793,5,25,0,0,793,797,3,162,81,0,794,795,5,25,0,0,795,797,3,
		160,80,0,796,792,1,0,0,0,796,794,1,0,0,0,797,159,1,0,0,0,798,799,5,32,
		0,0,799,804,3,164,82,0,800,801,5,16,0,0,801,803,3,164,82,0,802,800,1,0,
		0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,
		804,1,0,0,0,807,808,5,33,0,0,808,161,1,0,0,0,809,810,3,164,82,0,810,811,
		5,76,0,0,811,819,1,0,0,0,812,813,3,164,82,0,813,814,5,31,0,0,814,819,1,
		0,0,0,815,816,5,31,0,0,816,819,3,164,82,0,817,819,3,164,82,0,818,809,1,
		0,0,0,818,812,1,0,0,0,818,815,1,0,0,0,818,817,1,0,0,0,819,163,1,0,0,0,
		820,826,5,86,0,0,821,826,3,166,83,0,822,826,3,170,85,0,823,826,3,174,87,
		0,824,826,3,168,84,0,825,820,1,0,0,0,825,821,1,0,0,0,825,822,1,0,0,0,825,
		823,1,0,0,0,825,824,1,0,0,0,826,165,1,0,0,0,827,828,7,11,0,0,828,167,1,
		0,0,0,829,831,5,32,0,0,830,832,3,90,45,0,831,830,1,0,0,0,831,832,1,0,0,
		0,832,833,1,0,0,0,833,835,5,33,0,0,834,836,3,158,79,0,835,834,1,0,0,0,
		835,836,1,0,0,0,836,169,1,0,0,0,837,846,5,36,0,0,838,843,3,172,86,0,839,
		840,5,16,0,0,840,842,3,172,86,0,841,839,1,0,0,0,842,845,1,0,0,0,843,841,
		1,0,0,0,843,844,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,846,838,1,0,0,
		0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,5,37,0,0,849,171,1,0,0,0,850,
		851,5,34,0,0,851,852,3,68,34,0,852,853,5,35,0,0,853,854,5,25,0,0,854,855,
		3,164,82,0,855,861,1,0,0,0,856,857,5,86,0,0,857,858,5,25,0,0,858,861,3,
		164,82,0,859,861,5,86,0,0,860,850,1,0,0,0,860,856,1,0,0,0,860,859,1,0,
		0,0,861,173,1,0,0,0,862,863,3,176,88,0,863,864,5,34,0,0,864,865,5,35,0,
		0,865,878,1,0,0,0,866,867,5,34,0,0,867,872,3,164,82,0,868,869,5,16,0,0,
		869,871,3,164,82,0,870,868,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,
		873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,0,875,876,5,35,0,0,876,878,1,
		0,0,0,877,862,1,0,0,0,877,866,1,0,0,0,878,175,1,0,0,0,879,883,5,86,0,0,
		880,883,3,166,83,0,881,883,3,170,85,0,882,879,1,0,0,0,882,880,1,0,0,0,
		882,881,1,0,0,0,883,177,1,0,0,0,884,889,3,180,90,0,885,886,5,16,0,0,886,
		888,3,180,90,0,887,885,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,
		1,0,0,0,890,179,1,0,0,0,891,889,1,0,0,0,892,901,5,36,0,0,893,898,3,182,
		91,0,894,895,5,16,0,0,895,897,3,182,91,0,896,894,1,0,0,0,897,900,1,0,0,
		0,898,896,1,0,0,0,898,899,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,901,
		893,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,904,5,37,0,0,904,181,1,
		0,0,0,905,917,5,86,0,0,906,907,5,86,0,0,907,908,5,30,0,0,908,917,5,86,
		0,0,909,910,5,34,0,0,910,911,3,68,34,0,911,912,5,35,0,0,912,913,5,30,0,
		0,913,914,5,86,0,0,914,917,1,0,0,0,915,917,3,180,90,0,916,905,1,0,0,0,
		916,906,1,0,0,0,916,909,1,0,0,0,916,915,1,0,0,0,917,183,1,0,0,0,918,921,
		3,186,93,0,919,921,3,190,95,0,920,918,1,0,0,0,920,919,1,0,0,0,921,185,
		1,0,0,0,922,923,5,84,0,0,923,924,5,85,0,0,924,925,3,124,62,0,925,926,3,
		188,94,0,926,927,5,7,0,0,927,187,1,0,0,0,928,930,3,190,95,0,929,928,1,
		0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,189,1,0,0,0,
		933,931,1,0,0,0,934,935,5,84,0,0,935,942,3,150,75,0,936,937,5,84,0,0,937,
		942,3,152,76,0,938,942,3,192,96,0,939,942,3,196,98,0,940,942,3,202,101,
		0,941,934,1,0,0,0,941,936,1,0,0,0,941,938,1,0,0,0,941,939,1,0,0,0,941,
		940,1,0,0,0,942,191,1,0,0,0,943,944,5,84,0,0,944,945,5,71,0,0,945,947,
		5,86,0,0,946,948,3,136,68,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,
		0,0,0,949,951,3,138,69,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,
		0,952,953,3,194,97,0,953,954,5,7,0,0,954,193,1,0,0,0,955,957,3,190,95,
		0,956,955,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,
		195,1,0,0,0,960,958,1,0,0,0,961,962,5,84,0,0,962,963,5,74,0,0,963,965,
		5,86,0,0,964,966,3,144,72,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,
		0,0,0,967,968,3,198,99,0,968,969,5,7,0,0,969,197,1,0,0,0,970,972,3,200,
		100,0,971,970,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,
		974,199,1,0,0,0,975,973,1,0,0,0,976,977,5,84,0,0,977,981,3,150,75,0,978,
		979,5,84,0,0,979,981,3,152,76,0,980,976,1,0,0,0,980,978,1,0,0,0,981,201,
		1,0,0,0,982,983,5,84,0,0,983,984,5,70,0,0,984,985,5,86,0,0,985,986,3,204,
		102,0,986,987,5,7,0,0,987,203,1,0,0,0,988,990,3,130,65,0,989,988,1,0,0,
		0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,205,1,0,0,0,993,
		991,1,0,0,0,100,212,218,222,227,233,237,239,256,266,270,294,298,323,344,
		356,361,364,371,376,381,390,395,398,402,405,407,415,419,423,425,428,439,
		444,451,459,467,485,528,530,537,544,551,559,564,570,578,582,585,589,595,
		600,611,615,622,627,630,634,638,642,652,656,668,702,709,717,722,725,739,
		745,751,762,768,773,788,796,804,818,825,831,835,843,846,860,872,877,882,
		889,898,901,916,920,931,941,947,950,958,965,973,980,991
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace qLua.Compiler.CodeAnalysis
